# JFacer.py
# Regenerate Constants.java, LexerConstants.java, and Scintilla.java files from the
# Scintilla.iface interface definition file. The java files are copied to a temporary file apart from
# the section between a //++Autogenerated comment and a //--Autogenerated comment which is
# generated by the printHFile and printLexHFile functions. After the temporary file is created, it is
# copied back to the original file name. Get Scintilla.iface from http://www.scintilla.org/

import string
import sys
import os
import Face

def Contains(s,sub):
	return string.find(s, sub) != -1

def printLexerConstants(f,out):
	for name in f.order:
		v = f.features[name]
		if v["FeatureType"] in ["val"]:
			if Contains(name, "SCE_") or Contains(name, "SCLEX_"):
				out.write("\tpublic static final int " + name + " = " + v["Value"] + ";\n")

def printScintillaImpl(f,out):
	for name in f.order:
		v = f.features[name]
		if (v["FeatureType"] in ["fun", "get", "set"]) and name!="FormatRange":
			_deprecated = ""
			_comment  = ""
			_abstract = ""
			ret = getJavaType( v["ReturnType"] )
			_p1type  = getJavaType(v["Param1Type"])
			_p2type  = getJavaType(v["Param2Type"])
			_p1name  = v["Param1Name"]
			_p2name  = v["Param2Name"]

			zeroWParam = (_p1name == "") & (_p2name != "" )
			if v["Category"] == "Deprecated":
				_deprecated = "\t * @deprecated\n"
			for line in v["Comment"]:
				_comment += "\t * " + line + "\n"
			if zeroWParam:
				_comment += "\t * NOTE: You should pass zero as wParam.\n"
			out.write("\t/**\n")
			out.write(_comment + _deprecated)
			out.write("\t */\n")
			out.write("\tpublic " + _abstract + ret + " " + lowerFirstChar(name) + " (")
			if( _p1name != "" ):
				out.write( " " + _p1type + " " + _p1name)
			if( _p2name != "" ):
				if not zeroWParam:
					out.write(", ")
				out.write( _p2type + " " + _p2name + " " )

			out.write( "checkWidget();" );

			wparam = "0"
			lparam = "0"
			_return = "return "
			_post = ""
			_MSG = v["Value"]
			if _p1name != "":
				wparam = _p1name
				if( _p1type == "boolean" ):
					wparam = "("+_p1name + " == true) ? 1 : 0"
			if _p2name != "":
				lparam = _p2name
				if( _p2type == "boolean" ):
					lparam = "(" + _p2name + "==true) ? 1 : 0"
			if( ret == "void"):
				_return = ""
			elif (ret == "boolean"):
				_post = "==0 ? false : true"
			out.write(") {\n\t\t" + _return + "_SendMessage( " + _MSG + ", " + wparam + ", " + lparam + " )" + _post + ";\n\t}\n\n")

def getJavaType(type):
			if type == "position":
				return "int"
			if type == "string":
				return "String"
			if type == "bool":
				return "boolean"
			if type == "colour":
				return "int"
			if type == "stringresult":
				return "Text"
			if type == "keymod":
				return "int"
			if type == "textrange":
				return "TextRange"
			if type == "findtext":
				return "FindText"
			if type == "textrange":
				return "TextRange"
			if type == "cells":
				return "String/*cells*/"
			return type


def printConstants(f,out):
	for name in f.order:
		v = f.features[name]
		if v["Category"] != "Deprecated":
			if v["FeatureType"] in ["fun", "get", "set"]:
				featureDefineName = "SCI_" + string.upper(name)
				out.write("\tpublic static final int " + featureDefineName + " = " + v["Value"] + ";\n")
			elif v["FeatureType"] in ["evt"]:
				featureDefineName = "SCN_" + string.upper(name)
				out.write("\tpublic static final int " + featureDefineName + " = " + v["Value"] + ";\n")
			elif v["FeatureType"] in ["val"]:
				if not (Contains(name, "SCE_") or Contains(name, "SCLEX_")):
					out.write("\tpublic static final int " + name + " = " + v["Value"] + ";\n")

def printLexHFile(f,out):
	for name in f.order:
		v = f.features[name]
		if v["FeatureType"] in ["val"]:
			if Contains(name, "SCE_") or Contains(name, "SCLEX_"):
				out.write("#define " + name + " " + v["Value"] + "\n")

def printHFile(f,out):
	for name in f.order:
		v = f.features[name]
		if v["Category"] != "Deprecated":
			if v["FeatureType"] in ["fun", "get", "set"]:
				featureDefineName = "SCI_" + string.upper(name)
				out.write("#define " + featureDefineName + " " + v["Value"] + "\n")
			elif v["FeatureType"] in ["evt"]:
				featureDefineName = "SCN_" + string.upper(name)
				out.write("#define " + featureDefineName + " " + v["Value"] + "\n")
			elif v["FeatureType"] in ["val"]:
				if not (Contains(name, "SCE_") or Contains(name, "SCLEX_")):
					out.write("#define " + name + " " + v["Value"] + "\n")

def CopyWithInsertion(input, output, genfn, definition):
	copying = 1
	for line in input.readlines():
		if copying:
			output.write(line)
		if Contains(line, "//++Autogenerated"):
			copying = 0
			genfn(definition, output)
		if Contains(line, "//--Autogenerated"):
			copying = 1
			output.write(line)

def printScintilla(f,out):
	for name in f.order:
		v = f.features[name]
		if (v["FeatureType"] in ["fun", "get", "set"]) and name!="FormatRange":
			deprecated = ""
			comment = ""
			ret = getJavaType( v["ReturnType"] )
			zeroWParam = (v["Param1Name"] == "") & (v["Param2Name"] != "" )
			if v["Category"] == "Deprecated":
				deprecated = "\t * @deprecated\n"
			for line in v["Comment"]:
				comment += "\t * " + line + "\n"
			if zeroWParam:
				comment += "\t * NOTE: You should pass zero as wParam.\n"
			out.write("\t/**\n")
			out.write(comment + deprecated)
			out.write("\t */\n")
			out.write("\tpublic " + ret + " " + lowerFirstChar(name) + " (")
			if( v["Param1Name"] != "" ):
				out.write( " " + getJavaType(v["Param1Type"]) + " " + v["Param1Name"])
			if( v["Param2Name"] != "" ):
				if not zeroWParam:
					out.write(", ")
				out.write( getJavaType(v["Param2Type"]) + " " + v["Param2Name"] + " " )
			out.write(");\n\n")

def Regenerate(filename, genfn, definition):
	tempname = "JFacer.tmp"
	out = open(tempname,"w")
	hfile = open(filename)
	CopyWithInsertion(hfile, out, genfn, definition)
	out.close()
	hfile.close()
	os.unlink(filename)
	os.rename(tempname, filename)

def lowerFirstChar(name):
	# Some special cases necessary to use method names with the first char lowercase and not have language problems or super class collisions.
	if ( name == "Null" ): name = "nullOperation";
	if ( name == "GetCodePage" ): name = "getScintillaCodePage";
	if ( name == "SetCodePage" ): name = "setScintillaCodePage";
	return string.lower( name[0] ) + name[1:]

f = Face.Face()
f.ReadFromFile("Scintilla.iface")
Regenerate("ScintillaConstants.java", printConstants, f)
Regenerate("LexerConstants.java", printLexerConstants, f)
#Regenerate("IScintilla.java", printScintilla, f)
Regenerate("Scintilla.java", printScintillaImpl, f)
